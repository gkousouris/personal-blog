{"version":3,"file":"component---src-templates-blog-index-js-2fc4a30e1775375d4a5f.js","mappings":"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","sources":["webpack://j.blaszyk.me/./src/components/Bio.js","webpack://j.blaszyk.me/./src/components/SEO.js","webpack://j.blaszyk.me/./src/components/Footer.js","webpack://j.blaszyk.me/./src/templates/blog-index.js","webpack://j.blaszyk.me/./src/utils/helpers.js"],"sourcesContent":["import React from 'react';\nimport { rhythm } from '../utils/typography';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nclass Bio extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          marginBottom: rhythm(2),\n        }}\n      >\n        <div\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: 0,\n            width: rhythm(2),\n            minWidth: rhythm(2),\n            height: rhythm(2),\n            borderRadius: '50%',\n            overflow: 'hidden',\n            transform: 'translateZ(0)',\n          }}\n        >\n          <StaticImage\n            src={`../assets/profile-pic.jpg`}\n            alt={`Profile pic`}\n            width={90}\n            height={90}\n          />\n        </div>\n\n        <p style={{ maxWidth: 380 }}>\n          Personal blog by{' '}\n          <a href=\"https://mobile.twitter.com/jedr_blaszyk\">Jedr Blaszyk</a>.{' '}\n          Tech, bikes & travelling.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Bio;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n        image\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = `${siteMetadata.siteUrl}${siteMetadata.image}`;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        const ogCustomImagePath = `${siteMetadata.siteUrl}${image}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title}`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'robots',\n                content: 'index, follow',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                image\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: ogCustomImagePath,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: ogCustomImagePath,\n                      },\n                    ]\n                  : [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\n\nimport { rhythm } from '../utils/typography';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer\n        style={{\n          marginTop: rhythm(2.5),\n          paddingTop: rhythm(1),\n        }}\n      >\n        <div style={{ float: 'right' }}>\n          <a href=\"/rss.xml\" target=\"_blank\" rel=\"noopener noreferrer\">\n            rss\n          </a>\n        </div>\n        <a\n          href=\"https://mobile.twitter.com/jedr_blaszyk\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          twitter\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://github.com/jedrazb\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          github\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://www.strava.com/athletes/jedrzej_blaszyk\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          strava\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://www.yelp.com/user_details?userid=iNhtBqAm2UyyIxqZTc5Drg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          yelp\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import { Link, graphql } from 'gatsby';\nimport { formatPostDate, formatReadingTime } from '../utils/helpers';\n\nimport Bio from '../components/Bio';\nimport Footer from '../components/Footer';\nimport Layout from '../components/Layout';\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport get from 'lodash/get';\nimport { rhythm } from '../utils/typography';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nclass BlogIndexTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    const langKey = this.props.pageContext.langKey;\n\n    const posts = get(this, 'props.data.allMdx.edges');\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO />\n        <aside>\n          <Bio />\n        </aside>\n        <main>\n          {posts.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug;\n            const indexImage = get(node, 'frontmatter.indexImage');\n            return (\n              <article key={node.fields.slug}>\n                <header>\n                  <h3\n                    style={{\n                      fontFamily: 'Montserrat, sans-serif',\n                      fontSize: rhythm(1),\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                  >\n                    <Link\n                      style={{ boxShadow: 'none' }}\n                      to={node.fields.slug}\n                      rel=\"bookmark\"\n                    >\n                      {title}\n                    </Link>\n                  </h3>\n                  <small>\n                    {formatPostDate(node.frontmatter.date)}\n                    {` • ${formatReadingTime(node.timeToRead)}`}\n                  </small>\n                </header>\n                <p\n                  dangerouslySetInnerHTML={{ __html: node.frontmatter.spoiler }}\n                />\n\n                {indexImage && (\n                  <GatsbyImage\n                    image={getImage(indexImage)}\n                    alt={'Blog Image'}\n                  />\n                )}\n              </article>\n            );\n          })}\n        </main>\n        <Footer />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndexTemplate;\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n            indexImage {\n              childImageSharp {\n                gatsbyImageData(width: 800, layout: CONSTRAINED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5);\n  let bowls = 0;\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill('🍱')\n      .join('')} ${minutes} min read`;\n  } else {\n    return `${new Array(cups || 1).fill('☕️').join('')} ${minutes} min read`;\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang = 'en') {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date;\n  }\n\n  date = new Date(date);\n  const args = [\n    lang,\n    { day: 'numeric', month: 'long', year: 'numeric' },\n  ].filter(Boolean);\n  return date.toLocaleDateString(...args);\n}\n"],"names":["Bio","render","style","display","marginBottom","rhythm","marginRight","width","minWidth","height","borderRadius","overflow","transform","S","src","alt","maxWidth","href","React","SEO","meta","image","title","description","slug","lang","StaticQuery","query","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","ogCustomImagePath","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","Footer","marginTop","paddingTop","float","target","rel","BlogIndexTemplate","siteTitle","get","this","posts","props","pageContext","langKey","Layout","location","map","node","fields","indexImage","key","fontFamily","fontSize","Link","boxShadow","to","formatPostDate","frontmatter","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","spoiler","G","getImage","minutes","cups","Math","round","Array","E","fill","join","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean"],"sourceRoot":""}